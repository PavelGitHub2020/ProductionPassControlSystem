//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PassageControll.PassageControlService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassageControlService.IProductionPassControlSystemService")]
    public interface IProductionPassControlSystemService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionPassControlSystemService/AddingDataAboutShifts", ReplyAction="http://tempuri.org/IProductionPassControlSystemService/AddingDataAboutShiftsRespo" +
            "nse")]
        void AddingDataAboutShifts(ProductionPassControlSystem.Entity.ScheduleOfShift sheduleOfShift, int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionPassControlSystemService/AddingDataAboutShifts", ReplyAction="http://tempuri.org/IProductionPassControlSystemService/AddingDataAboutShiftsRespo" +
            "nse")]
        System.Threading.Tasks.Task AddingDataAboutShiftsAsync(ProductionPassControlSystem.Entity.ScheduleOfShift sheduleOfShift, int number);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductionPassControlSystemServiceChannel : PassageControll.PassageControlService.IProductionPassControlSystemService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductionPassControlSystemServiceClient : System.ServiceModel.ClientBase<PassageControll.PassageControlService.IProductionPassControlSystemService>, PassageControll.PassageControlService.IProductionPassControlSystemService {
        
        public ProductionPassControlSystemServiceClient() {
        }
        
        public ProductionPassControlSystemServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductionPassControlSystemServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductionPassControlSystemServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductionPassControlSystemServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddingDataAboutShifts(ProductionPassControlSystem.Entity.ScheduleOfShift sheduleOfShift, int number) {
            base.Channel.AddingDataAboutShifts(sheduleOfShift, number);
        }
        
        public System.Threading.Tasks.Task AddingDataAboutShiftsAsync(ProductionPassControlSystem.Entity.ScheduleOfShift sheduleOfShift, int number) {
            return base.Channel.AddingDataAboutShiftsAsync(sheduleOfShift, number);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassageControlService.IInformationAboutShifts")]
    public interface IInformationAboutShifts {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetInformationAboutFirstShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetInformationAboutFirstShiftResponse")]
        void GetInformationAboutFirstShift(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetInformationAboutFirstShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetInformationAboutFirstShiftResponse")]
        System.Threading.Tasks.Task GetInformationAboutFirstShiftAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetInformationAboutSecondShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetInformationAboutSecondShiftResponse" +
            "")]
        void GetInformationAboutSecondShift(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetInformationAboutSecondShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetInformationAboutSecondShiftResponse" +
            "")]
        System.Threading.Tasks.Task GetInformationAboutSecondShiftAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetInformationAboutThirdShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetInformationAboutThirdShiftResponse")]
        void GetInformationAboutThirdShift(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetInformationAboutThirdShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetInformationAboutThirdShiftResponse")]
        System.Threading.Tasks.Task GetInformationAboutThirdShiftAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetInformationAboutFourthShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetInformationAboutFourthShiftResponse" +
            "")]
        void GetInformationAboutFourthShift(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetInformationAboutFourthShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetInformationAboutFourthShiftResponse" +
            "")]
        System.Threading.Tasks.Task GetInformationAboutFourthShiftAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/SelectingSaturdayOrSunday", ReplyAction="http://tempuri.org/IInformationAboutShifts/SelectingSaturdayOrSundayResponse")]
        void SelectingSaturdayOrSunday(string year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/SelectingSaturdayOrSunday", ReplyAction="http://tempuri.org/IInformationAboutShifts/SelectingSaturdayOrSundayResponse")]
        System.Threading.Tasks.Task SelectingSaturdayOrSundayAsync(string year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/SelectingYear", ReplyAction="http://tempuri.org/IInformationAboutShifts/SelectingYearResponse")]
        void SelectingYear(string numberOfYear, bool changingInformation, string numberOfYearFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/SelectingYear", ReplyAction="http://tempuri.org/IInformationAboutShifts/SelectingYearResponse")]
        System.Threading.Tasks.Task SelectingYearAsync(string numberOfYear, bool changingInformation, string numberOfYearFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/SelectingMonth", ReplyAction="http://tempuri.org/IInformationAboutShifts/SelectingMonthResponse")]
        void SelectingMonth(string nameOfYear, string nameOfMonths, bool changingInformation, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/SelectingMonth", ReplyAction="http://tempuri.org/IInformationAboutShifts/SelectingMonthResponse")]
        System.Threading.Tasks.Task SelectingMonthAsync(string nameOfYear, string nameOfMonths, bool changingInformation, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/ClearData", ReplyAction="http://tempuri.org/IInformationAboutShifts/ClearDataResponse")]
        void ClearData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/ClearData", ReplyAction="http://tempuri.org/IInformationAboutShifts/ClearDataResponse")]
        System.Threading.Tasks.Task ClearDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/ClearData2", ReplyAction="http://tempuri.org/IInformationAboutShifts/ClearData2Response")]
        void ClearData2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/ClearData2", ReplyAction="http://tempuri.org/IInformationAboutShifts/ClearData2Response")]
        System.Threading.Tasks.Task ClearData2Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/NumberOfDayShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/NumberOfDayShiftResponse")]
        int[] NumberOfDayShift();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/NumberOfDayShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/NumberOfDayShiftResponse")]
        System.Threading.Tasks.Task<int[]> NumberOfDayShiftAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/NumberOfNightShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/NumberOfNightShiftResponse")]
        int[] NumberOfNightShift();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/NumberOfNightShift", ReplyAction="http://tempuri.org/IInformationAboutShifts/NumberOfNightShiftResponse")]
        System.Threading.Tasks.Task<int[]> NumberOfNightShiftAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/NumberOfDayOff", ReplyAction="http://tempuri.org/IInformationAboutShifts/NumberOfDayOffResponse")]
        int[] NumberOfDayOff();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/NumberOfDayOff", ReplyAction="http://tempuri.org/IInformationAboutShifts/NumberOfDayOffResponse")]
        System.Threading.Tasks.Task<int[]> NumberOfDayOffAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/NumberOfEndDayOff", ReplyAction="http://tempuri.org/IInformationAboutShifts/NumberOfEndDayOffResponse")]
        int[] NumberOfEndDayOff();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/NumberOfEndDayOff", ReplyAction="http://tempuri.org/IInformationAboutShifts/NumberOfEndDayOffResponse")]
        System.Threading.Tasks.Task<int[]> NumberOfEndDayOffAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/NumberOfDay", ReplyAction="http://tempuri.org/IInformationAboutShifts/NumberOfDayResponse")]
        int[] NumberOfDay();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/NumberOfDay", ReplyAction="http://tempuri.org/IInformationAboutShifts/NumberOfDayResponse")]
        System.Threading.Tasks.Task<int[]> NumberOfDayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetTable1", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetTable1Response")]
        System.Data.DataTable GetTable1();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetTable1", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetTable1Response")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetTable1Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetChangedInformation", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetChangedInformationResponse")]
        System.Data.DataTable GetChangedInformation(int year, string month, int workId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/GetChangedInformation", ReplyAction="http://tempuri.org/IInformationAboutShifts/GetChangedInformationResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetChangedInformationAsync(int year, string month, int workId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/SelectingSaturdayOrSundayForChangeInfo" +
            "rmation", ReplyAction="http://tempuri.org/IInformationAboutShifts/SelectingSaturdayOrSundayForChangeInfo" +
            "rmationResponse")]
        int[] SelectingSaturdayOrSundayForChangeInformation(int years, string months);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/SelectingSaturdayOrSundayForChangeInfo" +
            "rmation", ReplyAction="http://tempuri.org/IInformationAboutShifts/SelectingSaturdayOrSundayForChangeInfo" +
            "rmationResponse")]
        System.Threading.Tasks.Task<int[]> SelectingSaturdayOrSundayForChangeInformationAsync(int years, string months);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/ChangingAWorkerSchedule", ReplyAction="http://tempuri.org/IInformationAboutShifts/ChangingAWorkerScheduleResponse")]
        void ChangingAWorkerSchedule(int shiftNumber, string year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/ChangingAWorkerSchedule", ReplyAction="http://tempuri.org/IInformationAboutShifts/ChangingAWorkerScheduleResponse")]
        System.Threading.Tasks.Task ChangingAWorkerScheduleAsync(int shiftNumber, string year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/ChekingForChangedDataInTheDatabase", ReplyAction="http://tempuri.org/IInformationAboutShifts/ChekingForChangedDataInTheDatabaseResp" +
            "onse")]
        int ChekingForChangedDataInTheDatabase(int year, string month, int workId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/ChekingForChangedDataInTheDatabase", ReplyAction="http://tempuri.org/IInformationAboutShifts/ChekingForChangedDataInTheDatabaseResp" +
            "onse")]
        System.Threading.Tasks.Task<int> ChekingForChangedDataInTheDatabaseAsync(int year, string month, int workId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/UpdateChangedShedule", ReplyAction="http://tempuri.org/IInformationAboutShifts/UpdateChangedSheduleResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ProductionPassControlSystem.Entity.ControlOfTheUseOfThePass))]
        void UpdateChangedShedule(ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule fieldsForChangingTheWorkShedule, int id, ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule[] fields, int year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/UpdateChangedShedule", ReplyAction="http://tempuri.org/IInformationAboutShifts/UpdateChangedSheduleResponse")]
        System.Threading.Tasks.Task UpdateChangedSheduleAsync(ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule fieldsForChangingTheWorkShedule, int id, ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule[] fields, int year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/AddFieldsForChanging", ReplyAction="http://tempuri.org/IInformationAboutShifts/AddFieldsForChangingResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ProductionPassControlSystem.Entity.ControlOfTheUseOfThePass))]
        void AddFieldsForChanging(ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule fieldsForChangingTheWorkShedule, int id, ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule[] fields, int year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutShifts/AddFieldsForChanging", ReplyAction="http://tempuri.org/IInformationAboutShifts/AddFieldsForChangingResponse")]
        System.Threading.Tasks.Task AddFieldsForChangingAsync(ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule fieldsForChangingTheWorkShedule, int id, ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule[] fields, int year, string month);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInformationAboutShiftsChannel : PassageControll.PassageControlService.IInformationAboutShifts, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InformationAboutShiftsClient : System.ServiceModel.ClientBase<PassageControll.PassageControlService.IInformationAboutShifts>, PassageControll.PassageControlService.IInformationAboutShifts {
        
        public InformationAboutShiftsClient() {
        }
        
        public InformationAboutShiftsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InformationAboutShiftsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InformationAboutShiftsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InformationAboutShiftsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void GetInformationAboutFirstShift(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            base.Channel.GetInformationAboutFirstShift(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public System.Threading.Tasks.Task GetInformationAboutFirstShiftAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            return base.Channel.GetInformationAboutFirstShiftAsync(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public void GetInformationAboutSecondShift(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            base.Channel.GetInformationAboutSecondShift(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public System.Threading.Tasks.Task GetInformationAboutSecondShiftAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            return base.Channel.GetInformationAboutSecondShiftAsync(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public void GetInformationAboutThirdShift(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            base.Channel.GetInformationAboutThirdShift(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public System.Threading.Tasks.Task GetInformationAboutThirdShiftAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            return base.Channel.GetInformationAboutThirdShiftAsync(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public void GetInformationAboutFourthShift(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            base.Channel.GetInformationAboutFourthShift(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public System.Threading.Tasks.Task GetInformationAboutFourthShiftAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            return base.Channel.GetInformationAboutFourthShiftAsync(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public void SelectingSaturdayOrSunday(string year, string month) {
            base.Channel.SelectingSaturdayOrSunday(year, month);
        }
        
        public System.Threading.Tasks.Task SelectingSaturdayOrSundayAsync(string year, string month) {
            return base.Channel.SelectingSaturdayOrSundayAsync(year, month);
        }
        
        public void SelectingYear(string numberOfYear, bool changingInformation, string numberOfYearFromForm) {
            base.Channel.SelectingYear(numberOfYear, changingInformation, numberOfYearFromForm);
        }
        
        public System.Threading.Tasks.Task SelectingYearAsync(string numberOfYear, bool changingInformation, string numberOfYearFromForm) {
            return base.Channel.SelectingYearAsync(numberOfYear, changingInformation, numberOfYearFromForm);
        }
        
        public void SelectingMonth(string nameOfYear, string nameOfMonths, bool changingInformation, string nameOfYearFromForm, string nameOfMonthFromForm) {
            base.Channel.SelectingMonth(nameOfYear, nameOfMonths, changingInformation, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public System.Threading.Tasks.Task SelectingMonthAsync(string nameOfYear, string nameOfMonths, bool changingInformation, string nameOfYearFromForm, string nameOfMonthFromForm) {
            return base.Channel.SelectingMonthAsync(nameOfYear, nameOfMonths, changingInformation, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public void ClearData() {
            base.Channel.ClearData();
        }
        
        public System.Threading.Tasks.Task ClearDataAsync() {
            return base.Channel.ClearDataAsync();
        }
        
        public void ClearData2() {
            base.Channel.ClearData2();
        }
        
        public System.Threading.Tasks.Task ClearData2Async() {
            return base.Channel.ClearData2Async();
        }
        
        public int[] NumberOfDayShift() {
            return base.Channel.NumberOfDayShift();
        }
        
        public System.Threading.Tasks.Task<int[]> NumberOfDayShiftAsync() {
            return base.Channel.NumberOfDayShiftAsync();
        }
        
        public int[] NumberOfNightShift() {
            return base.Channel.NumberOfNightShift();
        }
        
        public System.Threading.Tasks.Task<int[]> NumberOfNightShiftAsync() {
            return base.Channel.NumberOfNightShiftAsync();
        }
        
        public int[] NumberOfDayOff() {
            return base.Channel.NumberOfDayOff();
        }
        
        public System.Threading.Tasks.Task<int[]> NumberOfDayOffAsync() {
            return base.Channel.NumberOfDayOffAsync();
        }
        
        public int[] NumberOfEndDayOff() {
            return base.Channel.NumberOfEndDayOff();
        }
        
        public System.Threading.Tasks.Task<int[]> NumberOfEndDayOffAsync() {
            return base.Channel.NumberOfEndDayOffAsync();
        }
        
        public int[] NumberOfDay() {
            return base.Channel.NumberOfDay();
        }
        
        public System.Threading.Tasks.Task<int[]> NumberOfDayAsync() {
            return base.Channel.NumberOfDayAsync();
        }
        
        public System.Data.DataTable GetTable1() {
            return base.Channel.GetTable1();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetTable1Async() {
            return base.Channel.GetTable1Async();
        }
        
        public System.Data.DataTable GetChangedInformation(int year, string month, int workId) {
            return base.Channel.GetChangedInformation(year, month, workId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetChangedInformationAsync(int year, string month, int workId) {
            return base.Channel.GetChangedInformationAsync(year, month, workId);
        }
        
        public int[] SelectingSaturdayOrSundayForChangeInformation(int years, string months) {
            return base.Channel.SelectingSaturdayOrSundayForChangeInformation(years, months);
        }
        
        public System.Threading.Tasks.Task<int[]> SelectingSaturdayOrSundayForChangeInformationAsync(int years, string months) {
            return base.Channel.SelectingSaturdayOrSundayForChangeInformationAsync(years, months);
        }
        
        public void ChangingAWorkerSchedule(int shiftNumber, string year, string month) {
            base.Channel.ChangingAWorkerSchedule(shiftNumber, year, month);
        }
        
        public System.Threading.Tasks.Task ChangingAWorkerScheduleAsync(int shiftNumber, string year, string month) {
            return base.Channel.ChangingAWorkerScheduleAsync(shiftNumber, year, month);
        }
        
        public int ChekingForChangedDataInTheDatabase(int year, string month, int workId) {
            return base.Channel.ChekingForChangedDataInTheDatabase(year, month, workId);
        }
        
        public System.Threading.Tasks.Task<int> ChekingForChangedDataInTheDatabaseAsync(int year, string month, int workId) {
            return base.Channel.ChekingForChangedDataInTheDatabaseAsync(year, month, workId);
        }
        
        public void UpdateChangedShedule(ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule fieldsForChangingTheWorkShedule, int id, ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule[] fields, int year, string month) {
            base.Channel.UpdateChangedShedule(fieldsForChangingTheWorkShedule, id, fields, year, month);
        }
        
        public System.Threading.Tasks.Task UpdateChangedSheduleAsync(ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule fieldsForChangingTheWorkShedule, int id, ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule[] fields, int year, string month) {
            return base.Channel.UpdateChangedSheduleAsync(fieldsForChangingTheWorkShedule, id, fields, year, month);
        }
        
        public void AddFieldsForChanging(ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule fieldsForChangingTheWorkShedule, int id, ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule[] fields, int year, string month) {
            base.Channel.AddFieldsForChanging(fieldsForChangingTheWorkShedule, id, fields, year, month);
        }
        
        public System.Threading.Tasks.Task AddFieldsForChangingAsync(ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule fieldsForChangingTheWorkShedule, int id, ProductionPassControlSystem.Entity.FieldsForChangingTheWorkShedule[] fields, int year, string month) {
            return base.Channel.AddFieldsForChangingAsync(fieldsForChangingTheWorkShedule, id, fields, year, month);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassageControlService.IAddWorker")]
    public interface IAddWorker {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddWorker/AddWorker", ReplyAction="http://tempuri.org/IAddWorker/AddWorkerResponse")]
        void AddWorker(ProductionPassControlSystem.Entity.Worker worker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddWorker/AddWorker", ReplyAction="http://tempuri.org/IAddWorker/AddWorkerResponse")]
        System.Threading.Tasks.Task AddWorkerAsync(ProductionPassControlSystem.Entity.Worker worker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddWorker/GetMaxId", ReplyAction="http://tempuri.org/IAddWorker/GetMaxIdResponse")]
        int GetMaxId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddWorker/GetMaxId", ReplyAction="http://tempuri.org/IAddWorker/GetMaxIdResponse")]
        System.Threading.Tasks.Task<int> GetMaxIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddWorker/AddAddress", ReplyAction="http://tempuri.org/IAddWorker/AddAddressResponse")]
        void AddAddress(ProductionPassControlSystem.Entity.Address address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddWorker/AddAddress", ReplyAction="http://tempuri.org/IAddWorker/AddAddressResponse")]
        System.Threading.Tasks.Task AddAddressAsync(ProductionPassControlSystem.Entity.Address address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddWorker/AddPass", ReplyAction="http://tempuri.org/IAddWorker/AddPassResponse")]
        void AddPass(ProductionPassControlSystem.Entity.Pass pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddWorker/AddPass", ReplyAction="http://tempuri.org/IAddWorker/AddPassResponse")]
        System.Threading.Tasks.Task AddPassAsync(ProductionPassControlSystem.Entity.Pass pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddWorker/AddPhoto", ReplyAction="http://tempuri.org/IAddWorker/AddPhotoResponse")]
        void AddPhoto(ProductionPassControlSystem.Entity.Photo photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddWorker/AddPhoto", ReplyAction="http://tempuri.org/IAddWorker/AddPhotoResponse")]
        System.Threading.Tasks.Task AddPhotoAsync(ProductionPassControlSystem.Entity.Photo photo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAddWorkerChannel : PassageControll.PassageControlService.IAddWorker, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddWorkerClient : System.ServiceModel.ClientBase<PassageControll.PassageControlService.IAddWorker>, PassageControll.PassageControlService.IAddWorker {
        
        public AddWorkerClient() {
        }
        
        public AddWorkerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AddWorkerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddWorkerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddWorkerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddWorker(ProductionPassControlSystem.Entity.Worker worker) {
            base.Channel.AddWorker(worker);
        }
        
        public System.Threading.Tasks.Task AddWorkerAsync(ProductionPassControlSystem.Entity.Worker worker) {
            return base.Channel.AddWorkerAsync(worker);
        }
        
        public int GetMaxId() {
            return base.Channel.GetMaxId();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxIdAsync() {
            return base.Channel.GetMaxIdAsync();
        }
        
        public void AddAddress(ProductionPassControlSystem.Entity.Address address) {
            base.Channel.AddAddress(address);
        }
        
        public System.Threading.Tasks.Task AddAddressAsync(ProductionPassControlSystem.Entity.Address address) {
            return base.Channel.AddAddressAsync(address);
        }
        
        public void AddPass(ProductionPassControlSystem.Entity.Pass pass) {
            base.Channel.AddPass(pass);
        }
        
        public System.Threading.Tasks.Task AddPassAsync(ProductionPassControlSystem.Entity.Pass pass) {
            return base.Channel.AddPassAsync(pass);
        }
        
        public void AddPhoto(ProductionPassControlSystem.Entity.Photo photo) {
            base.Channel.AddPhoto(photo);
        }
        
        public System.Threading.Tasks.Task AddPhotoAsync(ProductionPassControlSystem.Entity.Photo photo) {
            return base.Channel.AddPhotoAsync(photo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassageControlService.IFindWorker")]
    public interface IFindWorker {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/FindByPassNumberAndDepartmentName", ReplyAction="http://tempuri.org/IFindWorker/FindByPassNumberAndDepartmentNameResponse")]
        void FindByPassNumberAndDepartmentName(string passNumber, string departmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/FindByPassNumberAndDepartmentName", ReplyAction="http://tempuri.org/IFindWorker/FindByPassNumberAndDepartmentNameResponse")]
        System.Threading.Tasks.Task FindByPassNumberAndDepartmentNameAsync(string passNumber, string departmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetTable", ReplyAction="http://tempuri.org/IFindWorker/GetTableResponse")]
        System.Data.DataTable GetTable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetTable", ReplyAction="http://tempuri.org/IFindWorker/GetTableResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetListWorker", ReplyAction="http://tempuri.org/IFindWorker/GetListWorkerResponse")]
        ProductionPassControlSystem.Entity.Worker[] GetListWorker();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetListWorker", ReplyAction="http://tempuri.org/IFindWorker/GetListWorkerResponse")]
        System.Threading.Tasks.Task<ProductionPassControlSystem.Entity.Worker[]> GetListWorkerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetListPass", ReplyAction="http://tempuri.org/IFindWorker/GetListPassResponse")]
        ProductionPassControlSystem.Entity.Pass[] GetListPass();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetListPass", ReplyAction="http://tempuri.org/IFindWorker/GetListPassResponse")]
        System.Threading.Tasks.Task<ProductionPassControlSystem.Entity.Pass[]> GetListPassAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetListAddress", ReplyAction="http://tempuri.org/IFindWorker/GetListAddressResponse")]
        ProductionPassControlSystem.Entity.Address[] GetListAddress();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetListAddress", ReplyAction="http://tempuri.org/IFindWorker/GetListAddressResponse")]
        System.Threading.Tasks.Task<ProductionPassControlSystem.Entity.Address[]> GetListAddressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetListPhoto", ReplyAction="http://tempuri.org/IFindWorker/GetListPhotoResponse")]
        ProductionPassControlSystem.Entity.Photo[] GetListPhoto();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetListPhoto", ReplyAction="http://tempuri.org/IFindWorker/GetListPhotoResponse")]
        System.Threading.Tasks.Task<ProductionPassControlSystem.Entity.Photo[]> GetListPhotoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetListDepName", ReplyAction="http://tempuri.org/IFindWorker/GetListDepNameResponse")]
        string[] GetListDepName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFindWorker/GetListDepName", ReplyAction="http://tempuri.org/IFindWorker/GetListDepNameResponse")]
        System.Threading.Tasks.Task<string[]> GetListDepNameAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFindWorkerChannel : PassageControll.PassageControlService.IFindWorker, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindWorkerClient : System.ServiceModel.ClientBase<PassageControll.PassageControlService.IFindWorker>, PassageControll.PassageControlService.IFindWorker {
        
        public FindWorkerClient() {
        }
        
        public FindWorkerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FindWorkerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FindWorkerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FindWorkerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void FindByPassNumberAndDepartmentName(string passNumber, string departmentName) {
            base.Channel.FindByPassNumberAndDepartmentName(passNumber, departmentName);
        }
        
        public System.Threading.Tasks.Task FindByPassNumberAndDepartmentNameAsync(string passNumber, string departmentName) {
            return base.Channel.FindByPassNumberAndDepartmentNameAsync(passNumber, departmentName);
        }
        
        public System.Data.DataTable GetTable() {
            return base.Channel.GetTable();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetTableAsync() {
            return base.Channel.GetTableAsync();
        }
        
        public ProductionPassControlSystem.Entity.Worker[] GetListWorker() {
            return base.Channel.GetListWorker();
        }
        
        public System.Threading.Tasks.Task<ProductionPassControlSystem.Entity.Worker[]> GetListWorkerAsync() {
            return base.Channel.GetListWorkerAsync();
        }
        
        public ProductionPassControlSystem.Entity.Pass[] GetListPass() {
            return base.Channel.GetListPass();
        }
        
        public System.Threading.Tasks.Task<ProductionPassControlSystem.Entity.Pass[]> GetListPassAsync() {
            return base.Channel.GetListPassAsync();
        }
        
        public ProductionPassControlSystem.Entity.Address[] GetListAddress() {
            return base.Channel.GetListAddress();
        }
        
        public System.Threading.Tasks.Task<ProductionPassControlSystem.Entity.Address[]> GetListAddressAsync() {
            return base.Channel.GetListAddressAsync();
        }
        
        public ProductionPassControlSystem.Entity.Photo[] GetListPhoto() {
            return base.Channel.GetListPhoto();
        }
        
        public System.Threading.Tasks.Task<ProductionPassControlSystem.Entity.Photo[]> GetListPhotoAsync() {
            return base.Channel.GetListPhotoAsync();
        }
        
        public string[] GetListDepName() {
            return base.Channel.GetListDepName();
        }
        
        public System.Threading.Tasks.Task<string[]> GetListDepNameAsync() {
            return base.Channel.GetListDepNameAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassageControlService.IGetAll")]
    public interface IGetAll {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetAll/GetNumberOfWorkers", ReplyAction="http://tempuri.org/IGetAll/GetNumberOfWorkersResponse")]
        int GetNumberOfWorkers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetAll/GetNumberOfWorkers", ReplyAction="http://tempuri.org/IGetAll/GetNumberOfWorkersResponse")]
        System.Threading.Tasks.Task<int> GetNumberOfWorkersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetAll/FindTheNumberOfEmployeesInDepartment", ReplyAction="http://tempuri.org/IGetAll/FindTheNumberOfEmployeesInDepartmentResponse")]
        int FindTheNumberOfEmployeesInDepartment(string nameOfDepartment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetAll/FindTheNumberOfEmployeesInDepartment", ReplyAction="http://tempuri.org/IGetAll/FindTheNumberOfEmployeesInDepartmentResponse")]
        System.Threading.Tasks.Task<int> FindTheNumberOfEmployeesInDepartmentAsync(string nameOfDepartment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetAll/GetAllWorker", ReplyAction="http://tempuri.org/IGetAll/GetAllWorkerResponse")]
        System.Data.DataTable GetAllWorker();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetAll/GetAllWorker", ReplyAction="http://tempuri.org/IGetAll/GetAllWorkerResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorkerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetAll/GetAllWorkerByDepartment", ReplyAction="http://tempuri.org/IGetAll/GetAllWorkerByDepartmentResponse")]
        System.Data.DataTable GetAllWorkerByDepartment(string departmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetAll/GetAllWorkerByDepartment", ReplyAction="http://tempuri.org/IGetAll/GetAllWorkerByDepartmentResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorkerByDepartmentAsync(string departmentName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGetAllChannel : PassageControll.PassageControlService.IGetAll, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllClient : System.ServiceModel.ClientBase<PassageControll.PassageControlService.IGetAll>, PassageControll.PassageControlService.IGetAll {
        
        public GetAllClient() {
        }
        
        public GetAllClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GetAllClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetAllClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetAllClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetNumberOfWorkers() {
            return base.Channel.GetNumberOfWorkers();
        }
        
        public System.Threading.Tasks.Task<int> GetNumberOfWorkersAsync() {
            return base.Channel.GetNumberOfWorkersAsync();
        }
        
        public int FindTheNumberOfEmployeesInDepartment(string nameOfDepartment) {
            return base.Channel.FindTheNumberOfEmployeesInDepartment(nameOfDepartment);
        }
        
        public System.Threading.Tasks.Task<int> FindTheNumberOfEmployeesInDepartmentAsync(string nameOfDepartment) {
            return base.Channel.FindTheNumberOfEmployeesInDepartmentAsync(nameOfDepartment);
        }
        
        public System.Data.DataTable GetAllWorker() {
            return base.Channel.GetAllWorker();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorkerAsync() {
            return base.Channel.GetAllWorkerAsync();
        }
        
        public System.Data.DataTable GetAllWorkerByDepartment(string departmentName) {
            return base.Channel.GetAllWorkerByDepartment(departmentName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorkerByDepartmentAsync(string departmentName) {
            return base.Channel.GetAllWorkerByDepartmentAsync(departmentName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassageControlService.IRemove")]
    public interface IRemove {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemove/GetAllWorker1", ReplyAction="http://tempuri.org/IRemove/GetAllWorker1Response")]
        System.Data.DataTable GetAllWorker1();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemove/GetAllWorker1", ReplyAction="http://tempuri.org/IRemove/GetAllWorker1Response")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorker1Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemove/AvailabilityOfASpecificWorkerId", ReplyAction="http://tempuri.org/IRemove/AvailabilityOfASpecificWorkerIdResponse")]
        int AvailabilityOfASpecificWorkerId(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemove/AvailabilityOfASpecificWorkerId", ReplyAction="http://tempuri.org/IRemove/AvailabilityOfASpecificWorkerIdResponse")]
        System.Threading.Tasks.Task<int> AvailabilityOfASpecificWorkerIdAsync(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemove/Remove", ReplyAction="http://tempuri.org/IRemove/RemoveResponse")]
        void Remove(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemove/Remove", ReplyAction="http://tempuri.org/IRemove/RemoveResponse")]
        System.Threading.Tasks.Task RemoveAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemove/GetAllWorkerByDepartment1", ReplyAction="http://tempuri.org/IRemove/GetAllWorkerByDepartment1Response")]
        System.Data.DataTable GetAllWorkerByDepartment1(string departmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemove/GetAllWorkerByDepartment1", ReplyAction="http://tempuri.org/IRemove/GetAllWorkerByDepartment1Response")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorkerByDepartment1Async(string departmentName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoveChannel : PassageControll.PassageControlService.IRemove, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveClient : System.ServiceModel.ClientBase<PassageControll.PassageControlService.IRemove>, PassageControll.PassageControlService.IRemove {
        
        public RemoveClient() {
        }
        
        public RemoveClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RemoveClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoveClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoveClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetAllWorker1() {
            return base.Channel.GetAllWorker1();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorker1Async() {
            return base.Channel.GetAllWorker1Async();
        }
        
        public int AvailabilityOfASpecificWorkerId(int workerId) {
            return base.Channel.AvailabilityOfASpecificWorkerId(workerId);
        }
        
        public System.Threading.Tasks.Task<int> AvailabilityOfASpecificWorkerIdAsync(int workerId) {
            return base.Channel.AvailabilityOfASpecificWorkerIdAsync(workerId);
        }
        
        public void Remove(int id) {
            base.Channel.Remove(id);
        }
        
        public System.Threading.Tasks.Task RemoveAsync(int id) {
            return base.Channel.RemoveAsync(id);
        }
        
        public System.Data.DataTable GetAllWorkerByDepartment1(string departmentName) {
            return base.Channel.GetAllWorkerByDepartment1(departmentName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorkerByDepartment1Async(string departmentName) {
            return base.Channel.GetAllWorkerByDepartment1Async(departmentName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassageControlService.IChangingWorkerInformation")]
    public interface IChangingWorkerInformation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/GetAllWorker2", ReplyAction="http://tempuri.org/IChangingWorkerInformation/GetAllWorker2Response")]
        System.Data.DataTable GetAllWorker2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/GetAllWorker2", ReplyAction="http://tempuri.org/IChangingWorkerInformation/GetAllWorker2Response")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorker2Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/AvailabilityOfASpecificWorkerId1", ReplyAction="http://tempuri.org/IChangingWorkerInformation/AvailabilityOfASpecificWorkerId1Res" +
            "ponse")]
        int AvailabilityOfASpecificWorkerId1(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/AvailabilityOfASpecificWorkerId1", ReplyAction="http://tempuri.org/IChangingWorkerInformation/AvailabilityOfASpecificWorkerId1Res" +
            "ponse")]
        System.Threading.Tasks.Task<int> AvailabilityOfASpecificWorkerId1Async(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/GetAllWorkerByDepartment2", ReplyAction="http://tempuri.org/IChangingWorkerInformation/GetAllWorkerByDepartment2Response")]
        System.Data.DataTable GetAllWorkerByDepartment2(string departmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/GetAllWorkerByDepartment2", ReplyAction="http://tempuri.org/IChangingWorkerInformation/GetAllWorkerByDepartment2Response")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorkerByDepartment2Async(string departmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/FindWorkerById1", ReplyAction="http://tempuri.org/IChangingWorkerInformation/FindWorkerById1Response")]
        System.Data.DataTable FindWorkerById1(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/FindWorkerById1", ReplyAction="http://tempuri.org/IChangingWorkerInformation/FindWorkerById1Response")]
        System.Threading.Tasks.Task<System.Data.DataTable> FindWorkerById1Async(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/UpdateWorker", ReplyAction="http://tempuri.org/IChangingWorkerInformation/UpdateWorkerResponse")]
        void UpdateWorker(ProductionPassControlSystem.Entity.Worker worker, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/UpdateWorker", ReplyAction="http://tempuri.org/IChangingWorkerInformation/UpdateWorkerResponse")]
        System.Threading.Tasks.Task UpdateWorkerAsync(ProductionPassControlSystem.Entity.Worker worker, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/UpdateAddress", ReplyAction="http://tempuri.org/IChangingWorkerInformation/UpdateAddressResponse")]
        void UpdateAddress(ProductionPassControlSystem.Entity.Address address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/UpdateAddress", ReplyAction="http://tempuri.org/IChangingWorkerInformation/UpdateAddressResponse")]
        System.Threading.Tasks.Task UpdateAddressAsync(ProductionPassControlSystem.Entity.Address address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/UpdatePass", ReplyAction="http://tempuri.org/IChangingWorkerInformation/UpdatePassResponse")]
        void UpdatePass(ProductionPassControlSystem.Entity.Pass pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/UpdatePass", ReplyAction="http://tempuri.org/IChangingWorkerInformation/UpdatePassResponse")]
        System.Threading.Tasks.Task UpdatePassAsync(ProductionPassControlSystem.Entity.Pass pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/UpdatePhoto", ReplyAction="http://tempuri.org/IChangingWorkerInformation/UpdatePhotoResponse")]
        void UpdatePhoto(ProductionPassControlSystem.Entity.Photo photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangingWorkerInformation/UpdatePhoto", ReplyAction="http://tempuri.org/IChangingWorkerInformation/UpdatePhotoResponse")]
        System.Threading.Tasks.Task UpdatePhotoAsync(ProductionPassControlSystem.Entity.Photo photo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChangingWorkerInformationChannel : PassageControll.PassageControlService.IChangingWorkerInformation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangingWorkerInformationClient : System.ServiceModel.ClientBase<PassageControll.PassageControlService.IChangingWorkerInformation>, PassageControll.PassageControlService.IChangingWorkerInformation {
        
        public ChangingWorkerInformationClient() {
        }
        
        public ChangingWorkerInformationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChangingWorkerInformationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChangingWorkerInformationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChangingWorkerInformationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetAllWorker2() {
            return base.Channel.GetAllWorker2();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorker2Async() {
            return base.Channel.GetAllWorker2Async();
        }
        
        public int AvailabilityOfASpecificWorkerId1(int workerId) {
            return base.Channel.AvailabilityOfASpecificWorkerId1(workerId);
        }
        
        public System.Threading.Tasks.Task<int> AvailabilityOfASpecificWorkerId1Async(int workerId) {
            return base.Channel.AvailabilityOfASpecificWorkerId1Async(workerId);
        }
        
        public System.Data.DataTable GetAllWorkerByDepartment2(string departmentName) {
            return base.Channel.GetAllWorkerByDepartment2(departmentName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllWorkerByDepartment2Async(string departmentName) {
            return base.Channel.GetAllWorkerByDepartment2Async(departmentName);
        }
        
        public System.Data.DataTable FindWorkerById1(int id) {
            return base.Channel.FindWorkerById1(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> FindWorkerById1Async(int id) {
            return base.Channel.FindWorkerById1Async(id);
        }
        
        public void UpdateWorker(ProductionPassControlSystem.Entity.Worker worker, int ID) {
            base.Channel.UpdateWorker(worker, ID);
        }
        
        public System.Threading.Tasks.Task UpdateWorkerAsync(ProductionPassControlSystem.Entity.Worker worker, int ID) {
            return base.Channel.UpdateWorkerAsync(worker, ID);
        }
        
        public void UpdateAddress(ProductionPassControlSystem.Entity.Address address) {
            base.Channel.UpdateAddress(address);
        }
        
        public System.Threading.Tasks.Task UpdateAddressAsync(ProductionPassControlSystem.Entity.Address address) {
            return base.Channel.UpdateAddressAsync(address);
        }
        
        public void UpdatePass(ProductionPassControlSystem.Entity.Pass pass) {
            base.Channel.UpdatePass(pass);
        }
        
        public System.Threading.Tasks.Task UpdatePassAsync(ProductionPassControlSystem.Entity.Pass pass) {
            return base.Channel.UpdatePassAsync(pass);
        }
        
        public void UpdatePhoto(ProductionPassControlSystem.Entity.Photo photo) {
            base.Channel.UpdatePhoto(photo);
        }
        
        public System.Threading.Tasks.Task UpdatePhotoAsync(ProductionPassControlSystem.Entity.Photo photo) {
            return base.Channel.UpdatePhotoAsync(photo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassageControlService.IPassageControl")]
    public interface IPassageControl {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetWorkerIdAndNumberOfShift", ReplyAction="http://tempuri.org/IPassageControl/GetWorkerIdAndNumberOfShiftResponse")]
        System.Data.DataTable GetWorkerIdAndNumberOfShift();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetWorkerIdAndNumberOfShift", ReplyAction="http://tempuri.org/IPassageControl/GetWorkerIdAndNumberOfShiftResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetWorkerIdAndNumberOfShiftAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/Add_Data_Of_The_Use_Of_A_Pass_By_A_Worker", ReplyAction="http://tempuri.org/IPassageControl/Add_Data_Of_The_Use_Of_A_Pass_By_A_WorkerRespo" +
            "nse")]
        void Add_Data_Of_The_Use_Of_A_Pass_By_A_Worker(ProductionPassControlSystem.Entity.ControlOfTheUseOfThePass controlOfTheUseOfThePass, ProductionPassControlSystem.Entity.ControlOfTheUseOfThePass[] controls, string timeOfUseOfThePass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/Add_Data_Of_The_Use_Of_A_Pass_By_A_Worker", ReplyAction="http://tempuri.org/IPassageControl/Add_Data_Of_The_Use_Of_A_Pass_By_A_WorkerRespo" +
            "nse")]
        System.Threading.Tasks.Task Add_Data_Of_The_Use_Of_A_Pass_By_A_WorkerAsync(ProductionPassControlSystem.Entity.ControlOfTheUseOfThePass controlOfTheUseOfThePass, ProductionPassControlSystem.Entity.ControlOfTheUseOfThePass[] controls, string timeOfUseOfThePass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/SelectingYear_PS", ReplyAction="http://tempuri.org/IPassageControl/SelectingYear_PSResponse")]
        void SelectingYear_PS(string numberOfYear, bool changingInformation, string numberOfYearFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/SelectingYear_PS", ReplyAction="http://tempuri.org/IPassageControl/SelectingYear_PSResponse")]
        System.Threading.Tasks.Task SelectingYear_PSAsync(string numberOfYear, bool changingInformation, string numberOfYearFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/SelectingMonth_PS", ReplyAction="http://tempuri.org/IPassageControl/SelectingMonth_PSResponse")]
        void SelectingMonth_PS(string nameOfYear, string nameOfMonths, bool changingInformation, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/SelectingMonth_PS", ReplyAction="http://tempuri.org/IPassageControl/SelectingMonth_PSResponse")]
        System.Threading.Tasks.Task SelectingMonth_PSAsync(string nameOfYear, string nameOfMonths, bool changingInformation, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetInformationAboutFirstShift_PS", ReplyAction="http://tempuri.org/IPassageControl/GetInformationAboutFirstShift_PSResponse")]
        void GetInformationAboutFirstShift_PS(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetInformationAboutFirstShift_PS", ReplyAction="http://tempuri.org/IPassageControl/GetInformationAboutFirstShift_PSResponse")]
        System.Threading.Tasks.Task GetInformationAboutFirstShift_PSAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetInformationAboutSecondShift_PS", ReplyAction="http://tempuri.org/IPassageControl/GetInformationAboutSecondShift_PSResponse")]
        void GetInformationAboutSecondShift_PS(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetInformationAboutSecondShift_PS", ReplyAction="http://tempuri.org/IPassageControl/GetInformationAboutSecondShift_PSResponse")]
        System.Threading.Tasks.Task GetInformationAboutSecondShift_PSAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetInformationAboutThirdShift_PS", ReplyAction="http://tempuri.org/IPassageControl/GetInformationAboutThirdShift_PSResponse")]
        void GetInformationAboutThirdShift_PS(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetInformationAboutThirdShift_PS", ReplyAction="http://tempuri.org/IPassageControl/GetInformationAboutThirdShift_PSResponse")]
        System.Threading.Tasks.Task GetInformationAboutThirdShift_PSAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetInformationAboutFourthShift_PS", ReplyAction="http://tempuri.org/IPassageControl/GetInformationAboutFourthShift_PSResponse")]
        void GetInformationAboutFourthShift_PS(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetInformationAboutFourthShift_PS", ReplyAction="http://tempuri.org/IPassageControl/GetInformationAboutFourthShift_PSResponse")]
        System.Threading.Tasks.Task GetInformationAboutFourthShift_PSAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetWorkerIdFromChangedInformation", ReplyAction="http://tempuri.org/IPassageControl/GetWorkerIdFromChangedInformationResponse")]
        System.Data.DataTable GetWorkerIdFromChangedInformation(int year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetWorkerIdFromChangedInformation", ReplyAction="http://tempuri.org/IPassageControl/GetWorkerIdFromChangedInformationResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetWorkerIdFromChangedInformationAsync(int year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/AvailabilityOfASpecificWorkerId_PS", ReplyAction="http://tempuri.org/IPassageControl/AvailabilityOfASpecificWorkerId_PSResponse")]
        int AvailabilityOfASpecificWorkerId_PS(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/AvailabilityOfASpecificWorkerId_PS", ReplyAction="http://tempuri.org/IPassageControl/AvailabilityOfASpecificWorkerId_PSResponse")]
        System.Threading.Tasks.Task<int> AvailabilityOfASpecificWorkerId_PSAsync(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetValuesOfTime", ReplyAction="http://tempuri.org/IPassageControl/GetValuesOfTimeResponse")]
        System.Data.DataTable GetValuesOfTime(int numberOfDay, int year, string month, int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetValuesOfTime", ReplyAction="http://tempuri.org/IPassageControl/GetValuesOfTimeResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetValuesOfTimeAsync(int numberOfDay, int year, string month, int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/NumberOfDayShift_PS", ReplyAction="http://tempuri.org/IPassageControl/NumberOfDayShift_PSResponse")]
        int[] NumberOfDayShift_PS();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/NumberOfDayShift_PS", ReplyAction="http://tempuri.org/IPassageControl/NumberOfDayShift_PSResponse")]
        System.Threading.Tasks.Task<int[]> NumberOfDayShift_PSAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/NumberOfNightShift_PS", ReplyAction="http://tempuri.org/IPassageControl/NumberOfNightShift_PSResponse")]
        int[] NumberOfNightShift_PS();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/NumberOfNightShift_PS", ReplyAction="http://tempuri.org/IPassageControl/NumberOfNightShift_PSResponse")]
        System.Threading.Tasks.Task<int[]> NumberOfNightShift_PSAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/NumberOfDayOff_PS", ReplyAction="http://tempuri.org/IPassageControl/NumberOfDayOff_PSResponse")]
        int[] NumberOfDayOff_PS();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/NumberOfDayOff_PS", ReplyAction="http://tempuri.org/IPassageControl/NumberOfDayOff_PSResponse")]
        System.Threading.Tasks.Task<int[]> NumberOfDayOff_PSAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/NumberOfEndDayOff_PS", ReplyAction="http://tempuri.org/IPassageControl/NumberOfEndDayOff_PSResponse")]
        int[] NumberOfEndDayOff_PS();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/NumberOfEndDayOff_PS", ReplyAction="http://tempuri.org/IPassageControl/NumberOfEndDayOff_PSResponse")]
        System.Threading.Tasks.Task<int[]> NumberOfEndDayOff_PSAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/ClearData_PS", ReplyAction="http://tempuri.org/IPassageControl/ClearData_PSResponse")]
        void ClearData_PS();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/ClearData_PS", ReplyAction="http://tempuri.org/IPassageControl/ClearData_PSResponse")]
        System.Threading.Tasks.Task ClearData_PSAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetChangedInformation_PS", ReplyAction="http://tempuri.org/IPassageControl/GetChangedInformation_PSResponse")]
        System.Data.DataTable GetChangedInformation_PS(int year, string month, int workId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/GetChangedInformation_PS", ReplyAction="http://tempuri.org/IPassageControl/GetChangedInformation_PSResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetChangedInformation_PSAsync(int year, string month, int workId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/SelectingSaturdayOrSundayForChangeInformation_" +
            "PS", ReplyAction="http://tempuri.org/IPassageControl/SelectingSaturdayOrSundayForChangeInformation_" +
            "PSResponse")]
        int[] SelectingSaturdayOrSundayForChangeInformation_PS(int years, string months);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/SelectingSaturdayOrSundayForChangeInformation_" +
            "PS", ReplyAction="http://tempuri.org/IPassageControl/SelectingSaturdayOrSundayForChangeInformation_" +
            "PSResponse")]
        System.Threading.Tasks.Task<int[]> SelectingSaturdayOrSundayForChangeInformation_PSAsync(int years, string months);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/FindWorkerById_PS", ReplyAction="http://tempuri.org/IPassageControl/FindWorkerById_PSResponse")]
        System.Data.DataTable FindWorkerById_PS(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassageControl/FindWorkerById_PS", ReplyAction="http://tempuri.org/IPassageControl/FindWorkerById_PSResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> FindWorkerById_PSAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPassageControlChannel : PassageControll.PassageControlService.IPassageControl, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PassageControlClient : System.ServiceModel.ClientBase<PassageControll.PassageControlService.IPassageControl>, PassageControll.PassageControlService.IPassageControl {
        
        public PassageControlClient() {
        }
        
        public PassageControlClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PassageControlClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PassageControlClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PassageControlClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetWorkerIdAndNumberOfShift() {
            return base.Channel.GetWorkerIdAndNumberOfShift();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetWorkerIdAndNumberOfShiftAsync() {
            return base.Channel.GetWorkerIdAndNumberOfShiftAsync();
        }
        
        public void Add_Data_Of_The_Use_Of_A_Pass_By_A_Worker(ProductionPassControlSystem.Entity.ControlOfTheUseOfThePass controlOfTheUseOfThePass, ProductionPassControlSystem.Entity.ControlOfTheUseOfThePass[] controls, string timeOfUseOfThePass) {
            base.Channel.Add_Data_Of_The_Use_Of_A_Pass_By_A_Worker(controlOfTheUseOfThePass, controls, timeOfUseOfThePass);
        }
        
        public System.Threading.Tasks.Task Add_Data_Of_The_Use_Of_A_Pass_By_A_WorkerAsync(ProductionPassControlSystem.Entity.ControlOfTheUseOfThePass controlOfTheUseOfThePass, ProductionPassControlSystem.Entity.ControlOfTheUseOfThePass[] controls, string timeOfUseOfThePass) {
            return base.Channel.Add_Data_Of_The_Use_Of_A_Pass_By_A_WorkerAsync(controlOfTheUseOfThePass, controls, timeOfUseOfThePass);
        }
        
        public void SelectingYear_PS(string numberOfYear, bool changingInformation, string numberOfYearFromForm) {
            base.Channel.SelectingYear_PS(numberOfYear, changingInformation, numberOfYearFromForm);
        }
        
        public System.Threading.Tasks.Task SelectingYear_PSAsync(string numberOfYear, bool changingInformation, string numberOfYearFromForm) {
            return base.Channel.SelectingYear_PSAsync(numberOfYear, changingInformation, numberOfYearFromForm);
        }
        
        public void SelectingMonth_PS(string nameOfYear, string nameOfMonths, bool changingInformation, string nameOfYearFromForm, string nameOfMonthFromForm) {
            base.Channel.SelectingMonth_PS(nameOfYear, nameOfMonths, changingInformation, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public System.Threading.Tasks.Task SelectingMonth_PSAsync(string nameOfYear, string nameOfMonths, bool changingInformation, string nameOfYearFromForm, string nameOfMonthFromForm) {
            return base.Channel.SelectingMonth_PSAsync(nameOfYear, nameOfMonths, changingInformation, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public void GetInformationAboutFirstShift_PS(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            base.Channel.GetInformationAboutFirstShift_PS(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public System.Threading.Tasks.Task GetInformationAboutFirstShift_PSAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            return base.Channel.GetInformationAboutFirstShift_PSAsync(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public void GetInformationAboutSecondShift_PS(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            base.Channel.GetInformationAboutSecondShift_PS(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public System.Threading.Tasks.Task GetInformationAboutSecondShift_PSAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            return base.Channel.GetInformationAboutSecondShift_PSAsync(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public void GetInformationAboutThirdShift_PS(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            base.Channel.GetInformationAboutThirdShift_PS(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public System.Threading.Tasks.Task GetInformationAboutThirdShift_PSAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            return base.Channel.GetInformationAboutThirdShift_PSAsync(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public void GetInformationAboutFourthShift_PS(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            base.Channel.GetInformationAboutFourthShift_PS(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public System.Threading.Tasks.Task GetInformationAboutFourthShift_PSAsync(bool passageControl, int numOfDays, string nameOfYearFromForm, string nameOfMonthFromForm) {
            return base.Channel.GetInformationAboutFourthShift_PSAsync(passageControl, numOfDays, nameOfYearFromForm, nameOfMonthFromForm);
        }
        
        public System.Data.DataTable GetWorkerIdFromChangedInformation(int year, string month) {
            return base.Channel.GetWorkerIdFromChangedInformation(year, month);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetWorkerIdFromChangedInformationAsync(int year, string month) {
            return base.Channel.GetWorkerIdFromChangedInformationAsync(year, month);
        }
        
        public int AvailabilityOfASpecificWorkerId_PS(int workerId) {
            return base.Channel.AvailabilityOfASpecificWorkerId_PS(workerId);
        }
        
        public System.Threading.Tasks.Task<int> AvailabilityOfASpecificWorkerId_PSAsync(int workerId) {
            return base.Channel.AvailabilityOfASpecificWorkerId_PSAsync(workerId);
        }
        
        public System.Data.DataTable GetValuesOfTime(int numberOfDay, int year, string month, int workerId) {
            return base.Channel.GetValuesOfTime(numberOfDay, year, month, workerId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetValuesOfTimeAsync(int numberOfDay, int year, string month, int workerId) {
            return base.Channel.GetValuesOfTimeAsync(numberOfDay, year, month, workerId);
        }
        
        public int[] NumberOfDayShift_PS() {
            return base.Channel.NumberOfDayShift_PS();
        }
        
        public System.Threading.Tasks.Task<int[]> NumberOfDayShift_PSAsync() {
            return base.Channel.NumberOfDayShift_PSAsync();
        }
        
        public int[] NumberOfNightShift_PS() {
            return base.Channel.NumberOfNightShift_PS();
        }
        
        public System.Threading.Tasks.Task<int[]> NumberOfNightShift_PSAsync() {
            return base.Channel.NumberOfNightShift_PSAsync();
        }
        
        public int[] NumberOfDayOff_PS() {
            return base.Channel.NumberOfDayOff_PS();
        }
        
        public System.Threading.Tasks.Task<int[]> NumberOfDayOff_PSAsync() {
            return base.Channel.NumberOfDayOff_PSAsync();
        }
        
        public int[] NumberOfEndDayOff_PS() {
            return base.Channel.NumberOfEndDayOff_PS();
        }
        
        public System.Threading.Tasks.Task<int[]> NumberOfEndDayOff_PSAsync() {
            return base.Channel.NumberOfEndDayOff_PSAsync();
        }
        
        public void ClearData_PS() {
            base.Channel.ClearData_PS();
        }
        
        public System.Threading.Tasks.Task ClearData_PSAsync() {
            return base.Channel.ClearData_PSAsync();
        }
        
        public System.Data.DataTable GetChangedInformation_PS(int year, string month, int workId) {
            return base.Channel.GetChangedInformation_PS(year, month, workId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetChangedInformation_PSAsync(int year, string month, int workId) {
            return base.Channel.GetChangedInformation_PSAsync(year, month, workId);
        }
        
        public int[] SelectingSaturdayOrSundayForChangeInformation_PS(int years, string months) {
            return base.Channel.SelectingSaturdayOrSundayForChangeInformation_PS(years, months);
        }
        
        public System.Threading.Tasks.Task<int[]> SelectingSaturdayOrSundayForChangeInformation_PSAsync(int years, string months) {
            return base.Channel.SelectingSaturdayOrSundayForChangeInformation_PSAsync(years, months);
        }
        
        public System.Data.DataTable FindWorkerById_PS(int id) {
            return base.Channel.FindWorkerById_PS(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> FindWorkerById_PSAsync(int id) {
            return base.Channel.FindWorkerById_PSAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassageControlService.IInformationAboutUseThePass")]
    public interface IInformationAboutUseThePass {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePass", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassRe" +
            "sponse")]
        System.Data.DataTable GetAllInformationAboutUseThePass();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePass", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassRe" +
            "sponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllInformationAboutUseThePassAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerId", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdResponse")]
        System.Data.DataTable GetAllInformationAboutUseThePassByWorkerId(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerId", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllInformationAboutUseThePassByWorkerIdAsync(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYear", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYearResponse")]
        System.Data.DataTable GetAllInformationAboutUseThePassByWorkerIdYear(int workerId, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYear", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYearResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllInformationAboutUseThePassByWorkerIdYearAsync(int workerId, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYearMonth", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYearMonthResponse")]
        System.Data.DataTable GetAllInformationAboutUseThePassByWorkerIdYearMonth(int workerId, int year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYearMonth", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYearMonthResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllInformationAboutUseThePassByWorkerIdYearMonthAsync(int workerId, int year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYearMonthNumberOfDay", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYearMonthNumberOfDayResponse")]
        System.Data.DataTable GetAllInformationAboutUseThePassByWorkerIdYearMonthNumberOfDay(int workerId, int year, string month, int numberOfDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYearMonthNumberOfDay", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/GetAllInformationAboutUseThePassBy" +
            "WorkerIdYearMonthNumberOfDayResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllInformationAboutUseThePassByWorkerIdYearMonthNumberOfDayAsync(int workerId, int year, string month, int numberOfDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/DeleteAllFromInformationAboutUseTh" +
            "ePass", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/DeleteAllFromInformationAboutUseTh" +
            "ePassResponse")]
        int DeleteAllFromInformationAboutUseThePass();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/DeleteAllFromInformationAboutUseTh" +
            "ePass", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/DeleteAllFromInformationAboutUseTh" +
            "ePassResponse")]
        System.Threading.Tasks.Task<int> DeleteAllFromInformationAboutUseThePassAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/DeleteAllInformationAboutUseThePas" +
            "sByWorkerId", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/DeleteAllInformationAboutUseThePas" +
            "sByWorkerIdResponse")]
        int DeleteAllInformationAboutUseThePassByWorkerId(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/DeleteAllInformationAboutUseThePas" +
            "sByWorkerId", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/DeleteAllInformationAboutUseThePas" +
            "sByWorkerIdResponse")]
        System.Threading.Tasks.Task<int> DeleteAllInformationAboutUseThePassByWorkerIdAsync(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYear", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYearResponse")]
        int DeletemoreSpecificInformationAboutUseThePassByWorkerIdYear(int workerId, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYear", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYearResponse")]
        System.Threading.Tasks.Task<int> DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearAsync(int workerId, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYearMonth", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYearMonthResponse")]
        int DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonth(int workerId, int year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYearMonth", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYearMonthResponse")]
        System.Threading.Tasks.Task<int> DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonthAsync(int workerId, int year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYearMonthNumberOfDay", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYearMonthNumberOfDayResponse")]
        int DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonthNumberOfDay(int workerId, int year, string month, int numberOfDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYearMonthNumberOfDay", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/DeletemoreSpecificInformationAbout" +
            "UseThePassByWorkerIdYearMonthNumberOfDayResponse")]
        System.Threading.Tasks.Task<int> DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonthNumberOfDayAsync(int workerId, int year, string month, int numberOfDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsed", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedResponse")]
        int TotalNumberOfPassesUsed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsed", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedResponse")]
        System.Threading.Tasks.Task<int> TotalNumberOfPassesUsedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerId", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdR" +
            "esponse")]
        int TotalNumberOfPassesUsedByWorkerId(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerId", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdR" +
            "esponse")]
        System.Threading.Tasks.Task<int> TotalNumberOfPassesUsedByWorkerIdAsync(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "ear", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "earResponse")]
        int TotalNumberOfPassesUsedByWorkerIdYear(int workerId, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "ear", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "earResponse")]
        System.Threading.Tasks.Task<int> TotalNumberOfPassesUsedByWorkerIdYearAsync(int workerId, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "earMonth", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "earMonthResponse")]
        int TotalNumberOfPassesUsedByWorkerIdYearMonth(int workerId, int year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "earMonth", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "earMonthResponse")]
        System.Threading.Tasks.Task<int> TotalNumberOfPassesUsedByWorkerIdYearMonthAsync(int workerId, int year, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "earMonthNumberOfDay", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "earMonthNumberOfDayResponse")]
        int TotalNumberOfPassesUsedByWorkerIdYearMonthNumberOfDay(int workerId, int year, string month, int numberOfDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "earMonthNumberOfDay", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/TotalNumberOfPassesUsedByWorkerIdY" +
            "earMonthNumberOfDayResponse")]
        System.Threading.Tasks.Task<int> TotalNumberOfPassesUsedByWorkerIdYearMonthNumberOfDayAsync(int workerId, int year, string month, int numberOfDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/AvailabilityOfASpecificWorkerId_Pa" +
            "ss", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/AvailabilityOfASpecificWorkerId_Pa" +
            "ssResponse")]
        int AvailabilityOfASpecificWorkerId_Pass(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationAboutUseThePass/AvailabilityOfASpecificWorkerId_Pa" +
            "ss", ReplyAction="http://tempuri.org/IInformationAboutUseThePass/AvailabilityOfASpecificWorkerId_Pa" +
            "ssResponse")]
        System.Threading.Tasks.Task<int> AvailabilityOfASpecificWorkerId_PassAsync(int workerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInformationAboutUseThePassChannel : PassageControll.PassageControlService.IInformationAboutUseThePass, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InformationAboutUseThePassClient : System.ServiceModel.ClientBase<PassageControll.PassageControlService.IInformationAboutUseThePass>, PassageControll.PassageControlService.IInformationAboutUseThePass {
        
        public InformationAboutUseThePassClient() {
        }
        
        public InformationAboutUseThePassClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InformationAboutUseThePassClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InformationAboutUseThePassClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InformationAboutUseThePassClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetAllInformationAboutUseThePass() {
            return base.Channel.GetAllInformationAboutUseThePass();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllInformationAboutUseThePassAsync() {
            return base.Channel.GetAllInformationAboutUseThePassAsync();
        }
        
        public System.Data.DataTable GetAllInformationAboutUseThePassByWorkerId(int workerId) {
            return base.Channel.GetAllInformationAboutUseThePassByWorkerId(workerId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllInformationAboutUseThePassByWorkerIdAsync(int workerId) {
            return base.Channel.GetAllInformationAboutUseThePassByWorkerIdAsync(workerId);
        }
        
        public System.Data.DataTable GetAllInformationAboutUseThePassByWorkerIdYear(int workerId, int year) {
            return base.Channel.GetAllInformationAboutUseThePassByWorkerIdYear(workerId, year);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllInformationAboutUseThePassByWorkerIdYearAsync(int workerId, int year) {
            return base.Channel.GetAllInformationAboutUseThePassByWorkerIdYearAsync(workerId, year);
        }
        
        public System.Data.DataTable GetAllInformationAboutUseThePassByWorkerIdYearMonth(int workerId, int year, string month) {
            return base.Channel.GetAllInformationAboutUseThePassByWorkerIdYearMonth(workerId, year, month);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllInformationAboutUseThePassByWorkerIdYearMonthAsync(int workerId, int year, string month) {
            return base.Channel.GetAllInformationAboutUseThePassByWorkerIdYearMonthAsync(workerId, year, month);
        }
        
        public System.Data.DataTable GetAllInformationAboutUseThePassByWorkerIdYearMonthNumberOfDay(int workerId, int year, string month, int numberOfDay) {
            return base.Channel.GetAllInformationAboutUseThePassByWorkerIdYearMonthNumberOfDay(workerId, year, month, numberOfDay);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllInformationAboutUseThePassByWorkerIdYearMonthNumberOfDayAsync(int workerId, int year, string month, int numberOfDay) {
            return base.Channel.GetAllInformationAboutUseThePassByWorkerIdYearMonthNumberOfDayAsync(workerId, year, month, numberOfDay);
        }
        
        public int DeleteAllFromInformationAboutUseThePass() {
            return base.Channel.DeleteAllFromInformationAboutUseThePass();
        }
        
        public System.Threading.Tasks.Task<int> DeleteAllFromInformationAboutUseThePassAsync() {
            return base.Channel.DeleteAllFromInformationAboutUseThePassAsync();
        }
        
        public int DeleteAllInformationAboutUseThePassByWorkerId(int workerId) {
            return base.Channel.DeleteAllInformationAboutUseThePassByWorkerId(workerId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteAllInformationAboutUseThePassByWorkerIdAsync(int workerId) {
            return base.Channel.DeleteAllInformationAboutUseThePassByWorkerIdAsync(workerId);
        }
        
        public int DeletemoreSpecificInformationAboutUseThePassByWorkerIdYear(int workerId, int year) {
            return base.Channel.DeletemoreSpecificInformationAboutUseThePassByWorkerIdYear(workerId, year);
        }
        
        public System.Threading.Tasks.Task<int> DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearAsync(int workerId, int year) {
            return base.Channel.DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearAsync(workerId, year);
        }
        
        public int DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonth(int workerId, int year, string month) {
            return base.Channel.DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonth(workerId, year, month);
        }
        
        public System.Threading.Tasks.Task<int> DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonthAsync(int workerId, int year, string month) {
            return base.Channel.DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonthAsync(workerId, year, month);
        }
        
        public int DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonthNumberOfDay(int workerId, int year, string month, int numberOfDay) {
            return base.Channel.DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonthNumberOfDay(workerId, year, month, numberOfDay);
        }
        
        public System.Threading.Tasks.Task<int> DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonthNumberOfDayAsync(int workerId, int year, string month, int numberOfDay) {
            return base.Channel.DeletemoreSpecificInformationAboutUseThePassByWorkerIdYearMonthNumberOfDayAsync(workerId, year, month, numberOfDay);
        }
        
        public int TotalNumberOfPassesUsed() {
            return base.Channel.TotalNumberOfPassesUsed();
        }
        
        public System.Threading.Tasks.Task<int> TotalNumberOfPassesUsedAsync() {
            return base.Channel.TotalNumberOfPassesUsedAsync();
        }
        
        public int TotalNumberOfPassesUsedByWorkerId(int workerId) {
            return base.Channel.TotalNumberOfPassesUsedByWorkerId(workerId);
        }
        
        public System.Threading.Tasks.Task<int> TotalNumberOfPassesUsedByWorkerIdAsync(int workerId) {
            return base.Channel.TotalNumberOfPassesUsedByWorkerIdAsync(workerId);
        }
        
        public int TotalNumberOfPassesUsedByWorkerIdYear(int workerId, int year) {
            return base.Channel.TotalNumberOfPassesUsedByWorkerIdYear(workerId, year);
        }
        
        public System.Threading.Tasks.Task<int> TotalNumberOfPassesUsedByWorkerIdYearAsync(int workerId, int year) {
            return base.Channel.TotalNumberOfPassesUsedByWorkerIdYearAsync(workerId, year);
        }
        
        public int TotalNumberOfPassesUsedByWorkerIdYearMonth(int workerId, int year, string month) {
            return base.Channel.TotalNumberOfPassesUsedByWorkerIdYearMonth(workerId, year, month);
        }
        
        public System.Threading.Tasks.Task<int> TotalNumberOfPassesUsedByWorkerIdYearMonthAsync(int workerId, int year, string month) {
            return base.Channel.TotalNumberOfPassesUsedByWorkerIdYearMonthAsync(workerId, year, month);
        }
        
        public int TotalNumberOfPassesUsedByWorkerIdYearMonthNumberOfDay(int workerId, int year, string month, int numberOfDay) {
            return base.Channel.TotalNumberOfPassesUsedByWorkerIdYearMonthNumberOfDay(workerId, year, month, numberOfDay);
        }
        
        public System.Threading.Tasks.Task<int> TotalNumberOfPassesUsedByWorkerIdYearMonthNumberOfDayAsync(int workerId, int year, string month, int numberOfDay) {
            return base.Channel.TotalNumberOfPassesUsedByWorkerIdYearMonthNumberOfDayAsync(workerId, year, month, numberOfDay);
        }
        
        public int AvailabilityOfASpecificWorkerId_Pass(int workerId) {
            return base.Channel.AvailabilityOfASpecificWorkerId_Pass(workerId);
        }
        
        public System.Threading.Tasks.Task<int> AvailabilityOfASpecificWorkerId_PassAsync(int workerId) {
            return base.Channel.AvailabilityOfASpecificWorkerId_PassAsync(workerId);
        }
    }
}
